#If it looks like JSON, parse it as JSON
if [@message] =~ /^\{/ {
  json {
    source => "@message"
    target => "parsed_json_data"
    add_tag => "json/auto_detect"
    remove_field => ["@message"]
  }

  if "_jsonparsefailure" in [tags] {

    mutate {
      remove_tag => [ "_jsonparsefailure" ]
    }

  } else {

    if [parsed_json_data][timestamp] {
      date {
        match => [ "[parsed_json_data][timestamp]", "ISO8601" ]
        add_tag => "json/hoist_@timestamp"
      }
    }

    #
    # Put the parsed_json_data into a top level field named after the @source.service or syslog_program
    #
    if [@source][service] {
       mutate { add_field => { "parsed_json_key" => "%{[@source][service]}" } }
    } else if [syslog_program] {
      mutate {
        add_field => { "parsed_json_key" => "%{syslog_program}"}
      }
    } else {
      mutate {
        add_field => { "parsed_json_key" => "unknown_source" }
      }
    }

    mutate {
      gsub => [
        "parsed_json_key", "[\s/\\?#-\.]", "_"
      ]
    }
    ruby {
      code => "event[event['parsed_json_key'].to_s.downcase] = LogStash::Util.normalize(event['parsed_json_data'])"
      remove_field => [ "parsed_json_key", "parsed_json_data" ]
    }
  }
}
